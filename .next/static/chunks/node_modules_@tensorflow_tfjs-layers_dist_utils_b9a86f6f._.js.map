{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"executor_utils.js","sourceRoot":"","sources":["file:///project/sandbox/user-workspace/node_modules/%40tensorflow/tfjs-layers/dist/utils/executor_utils.js/__/__/__/__/__/__/tfjs-layers/src/utils/executor_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * LruCache: A mapping from the String to T. If the number of the entries is\n * exceeding the `maxEntries`, the LruCache will delete the least recently\n * used entry.\n */\n\nexport class LruCache<T> {\n  private cache: Map<string, T>;\n  private maxEntries: number;\n\n  constructor(maxEntries?: number) {\n    this.maxEntries = maxEntries || 100;\n    this.cache = new Map<string, T>();\n  }\n\n  /**\n   * Get the entry for the key and mark it as used recently.\n   */\n  public get(key: string): T {\n    let entry: T;\n    if (this.cache.has(key)) {\n      entry = this.cache.get(key);\n      this.cache.delete(key);\n      this.cache.set(key, entry);\n    }\n    return entry;\n  }\n\n  /**\n   * Put the entry into the cache. If the key already existed, mark the key as\n   * used recently.\n   */\n  public put(key: string, value: T): void {\n    if (this.cache.has(key)) {\n      this.cache.delete(key);\n    } else if (this.cache.size >= this.maxEntries) {\n      const keyToDelete = this.cache.keys().next().value;\n      this.cache.delete(keyToDelete);\n    }\n    this.cache.set(key, value);\n  }\n\n  /**\n   * Get the MaxEntries of the cache.\n   */\n  public getMaxEntries(): number {\n    return this.maxEntries;\n  }\n\n  /**\n   * Set the MaxEntries of the cache. If the maxEntries is decreased, reduce\n   * entries in the cache.\n   */\n  public setMaxEntries(maxEntries: number): void {\n    if (maxEntries < 0) {\n      throw new Error(\n          `The maxEntries of LRU caches must be at least 0, but got ${\n              maxEntries}.`);\n    }\n\n    if (this.maxEntries > maxEntries) {\n      for (let i = 0; i < this.maxEntries - maxEntries; i++) {\n        const keyToDelete = this.cache.keys().next().value;\n        this.cache.delete(keyToDelete);\n      }\n    }\n\n    this.maxEntries = maxEntries;\n  }\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;GAQG,CACH;;;;GAIG;;;AAEG,MAAO,QAAQ;IAInB,YAAY,UAAmB,CAAA;QAC7B,IAAI,CAAC,UAAU,GAAG,UAAU,IAAI,GAAG,CAAC;QACpC,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,EAAa,CAAC;IACpC,CAAC;IAED;;OAEG,CACI,GAAG,CAAC,GAAW,EAAA;QACpB,IAAI,KAAQ,CAAC;QACb,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACvB,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC5B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACvB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;SAC5B;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED;;;OAGG,CACI,GAAG,CAAC,GAAW,EAAE,KAAQ,EAAA;QAC9B,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACvB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SACxB,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE;YAC7C,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;YACnD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;SAChC;QACD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC7B,CAAC;IAED;;OAEG,CACI,aAAa,GAAA;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED;;;OAGG,CACI,aAAa,CAAC,UAAkB,EAAA;QACrC,IAAI,UAAU,GAAG,CAAC,EAAE;YAClB,MAAM,IAAI,KAAK,CACX,CAAA,yDAAA,EACI,UAAU,CAAA,CAAA,CAAG,CAAC,CAAC;SACxB;QAED,IAAI,IAAI,CAAC,UAAU,GAAG,UAAU,EAAE;YAChC,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,GAAG,UAAU,EAAE,CAAC,EAAE,CAAE;gBACrD,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;gBACnD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;aAChC;SACF;QAED,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;CACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"file":"generic_utils.js","sourceRoot":"","sources":["file:///project/sandbox/user-workspace/node_modules/%40tensorflow/tfjs-layers/dist/utils/generic_utils.js/__/__/__/__/__/__/tfjs-layers/src/utils/generic_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: utils/generic_utils.py */\n\nimport {DataType, fused, serialization, util} from '@tensorflow/tfjs-core';\n\nimport {AssertionError, ValueError} from '../errors';\n\n// tslint:enable\n\n/**\n * If `value` is an Array, equivalent to Python's `value * numValues`.\n * If `value` is not an Array, equivalent to Python's `[value] * numValues`\n */\n// tslint:disable-next-line:no-any\nexport function pyListRepeat(value: any, numValues: number): any[] {\n  if (Array.isArray(value)) {\n    // tslint:disable-next-line:no-any\n    let newArray: any[] = [];\n    for (let i = 0; i < numValues; i++) {\n      newArray = newArray.concat(value);\n    }\n    return newArray;\n  } else {\n    const newArray = new Array(numValues);\n    newArray.fill(value);\n    return newArray;\n  }\n}\n\nexport function assert(val: boolean, message?: string): void {\n  if (!val) {\n    throw new AssertionError(message);\n  }\n}\n\n/**\n * Count the number of elements of the `array` that are equal to `reference`.\n */\nexport function count<T>(array: T[], refernce: T) {\n  let counter = 0;\n  for (const item of array) {\n    if (item === refernce) {\n      counter++;\n    }\n  }\n  return counter;\n}\n\n/**\n * If an array is of length 1, just return the first element. Otherwise, return\n * the full array.\n * @param tensors\n */\nexport function singletonOrArray<T>(xs: T[]): T|T[] {\n  if (xs.length === 1) {\n    return xs[0];\n  }\n  return xs;\n}\n\n/**\n * Normalizes a list/tensor into a list.\n *\n * If a tensor is passed, we return\n * a list of size 1 containing the tensor.\n *\n * @param x target object to be normalized.\n */\n// tslint:disable-next-line:no-any\nexport function toList<T>(x: T|T[]): T[] {\n  if (Array.isArray(x)) {\n    return x;\n  }\n  return [x];\n}\n\n/**\n * Generate a UID for a list\n */\n// tslint:disable-next-line:no-any\nexport function objectListUid(objs: any|any[]): string {\n  const objectList = toList(objs);\n  let retVal = '';\n  for (const obj of objectList) {\n    if (obj.id == null) {\n      throw new ValueError(\n          `Object ${obj} passed to objectListUid without an id`);\n    }\n    if (retVal !== '') {\n      retVal = retVal + ', ';\n    }\n    retVal = `${retVal}${Math.abs(obj.id)}`;\n  }\n  return retVal;\n}\n/**\n * Converts string to snake-case.\n * @param name\n */\nexport function toSnakeCase(name: string): string {\n  const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n  const insecure =\n      intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n  /*\n   If the class is private the name starts with \"_\" which is not secure\n   for creating scopes. We prefix the name with \"private\" in this case.\n   */\n  if (insecure[0] !== '_') {\n    return insecure;\n  }\n  return 'private' + insecure;\n}\n\nexport function toCamelCase(identifier: string): string {\n  // quick return for empty string or single character strings\n  if (identifier.length <= 1) {\n    return identifier;\n  }\n  // Check for the underscore indicating snake_case\n  if (identifier.indexOf('_') === -1) {\n    return identifier;\n  }\n  return identifier.replace(/[_]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n}\n\n// tslint:disable-next-line:no-any\nlet _GLOBAL_CUSTOM_OBJECTS = {} as {[objName: string]: any};\n\nexport function serializeKerasObject(instance: serialization.Serializable):\n    serialization.ConfigDictValue {\n  if (instance === null || instance === undefined) {\n    return null;\n  }\n  const dict: serialization.ConfigDictValue = {};\n  dict['className'] = instance.getClassName();\n  dict['config'] = instance.getConfig();\n  return dict;\n}\n\n/**\n * Replace ndarray-style scalar objects in serialization objects with numbers.\n *\n * Background: In some versions of tf.keras, certain scalar values in the HDF5\n * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,\n * where in `num` is a plain number. This method converts such serialization\n * to a `number`.\n *\n * @param config The keras-format serialization object to be processed\n *   (in place).\n */\nfunction convertNDArrayScalarsInConfig(config: serialization.ConfigDictValue):\n    void {\n  if (config == null || typeof config !== 'object') {\n    return;\n  } else if (Array.isArray(config)) {\n    config.forEach(configItem => convertNDArrayScalarsInConfig(configItem));\n  } else {\n    const fields = Object.keys(config);\n    for (const field of fields) {\n      const value = config[field];\n      if (value != null && typeof value === 'object') {\n        if (!Array.isArray(value) && value['type'] === 'ndarray' &&\n            typeof value['value'] === 'number') {\n          config[field] = value['value'];\n        } else {\n          convertNDArrayScalarsInConfig(value as serialization.ConfigDict);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Deserialize a saved Keras Object\n * @param identifier either a string ID or a saved Keras dictionary\n * @param moduleObjects a list of Python class names to object constructors\n * @param customObjects a list of Python class names to object constructors\n * @param printableModuleName debug text for the object being reconstituted\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns a TensorFlow.js Layers object\n */\n// tslint:disable:no-any\nexport function deserializeKerasObject(\n    identifier: string|serialization.ConfigDict,\n    moduleObjects = {} as {[objName: string]: any},\n    customObjects = {} as {[objName: string]: any},\n    printableModuleName = 'object', fastWeightInit = false): any {\n  // tslint:enable\n  if (typeof identifier === 'string') {\n    const functionName = identifier;\n    let fn;\n    if (functionName in customObjects) {\n      fn = customObjects[functionName];\n    } else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n      fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n    } else {\n      fn = moduleObjects[functionName];\n      if (fn == null) {\n        throw new ValueError(\n            `Unknown ${printableModuleName}: ${identifier}. ` +\n            `This may be due to one of the following reasons:\\n` +\n            `1. The ${printableModuleName} is defined in Python, in which ` +\n            `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n            `code.\\n` +\n            `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n            `but is not registered properly with ` +\n            `tf.serialization.registerClass().`);\n        // TODO(cais): Add link to tutorial page on custom layers.\n      }\n    }\n    return fn;\n  } else {\n    // In this case we are dealing with a Keras config dictionary.\n    const config = identifier;\n    if (config['className'] == null || config['config'] == null) {\n      throw new ValueError(\n          `${printableModuleName}: Improper config format: ` +\n          `${JSON.stringify(config)}.\\n` +\n          `'className' and 'config' must set.`);\n    }\n    const className = config['className'] as string;\n    let cls, fromConfig;\n    if (className in customObjects) {\n      [cls, fromConfig] = customObjects[className];\n    } else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n      [cls, fromConfig] = _GLOBAL_CUSTOM_OBJECTS['className'];\n    } else if (className in moduleObjects) {\n      [cls, fromConfig] = moduleObjects[className];\n    }\n    if (cls == null) {\n      throw new ValueError(\n          `Unknown ${printableModuleName}: ${className}. ` +\n          `This may be due to one of the following reasons:\\n` +\n          `1. The ${printableModuleName} is defined in Python, in which ` +\n          `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n          `code.\\n` +\n          `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n          `but is not registered properly with ` +\n          `tf.serialization.registerClass().`);\n      // TODO(cais): Add link to tutorial page on custom layers.\n    }\n    if (fromConfig != null) {\n      // Porting notes: Instead of checking to see whether fromConfig accepts\n      // customObjects, we create a customObjects dictionary and tack it on to\n      // config['config'] as config['config'].customObjects. Objects can use it,\n      // if they want.\n\n      // tslint:disable-next-line:no-any\n      const customObjectsCombined = {} as {[objName: string]: any};\n      for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS)) {\n        customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n      }\n      for (const key of Object.keys(customObjects)) {\n        customObjectsCombined[key] = customObjects[key];\n      }\n      // Add the customObjects to config\n      const nestedConfig = config['config'] as serialization.ConfigDict;\n      nestedConfig['customObjects'] = customObjectsCombined;\n\n      const backupCustomObjects = {..._GLOBAL_CUSTOM_OBJECTS};\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n      convertNDArrayScalarsInConfig(config['config']);\n      const returnObj =\n          fromConfig(cls, config['config'], customObjects, fastWeightInit);\n      _GLOBAL_CUSTOM_OBJECTS = {...backupCustomObjects};\n\n      return returnObj;\n    } else {\n      // Then `cls` may be a function returning a class.\n      // In this case by convention `config` holds\n      // the kwargs of the function.\n      const backupCustomObjects = {..._GLOBAL_CUSTOM_OBJECTS};\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n      // In python this is **config['config'], for tfjs-layers we require\n      // classes that use this fall-through construction method to take\n      // a config interface that mimics the expansion of named parameters.\n      const returnObj = new cls(config['config']);\n      _GLOBAL_CUSTOM_OBJECTS = {...backupCustomObjects};\n      return returnObj;\n    }\n  }\n}\n\n/**\n * Compares two numbers for sorting.\n * @param a\n * @param b\n */\nexport function numberCompare(a: number, b: number) {\n  return (a < b) ? -1 : ((a > b) ? 1 : 0);\n}\n\n/**\n * Comparison of two numbers for reverse sorting.\n * @param a\n * @param b\n */\nexport function reverseNumberCompare(a: number, b: number) {\n  return -1 * numberCompare(a, b);\n}\n\n/**\n * Convert a string into the corresponding DType.\n * @param dtype\n * @returns An instance of DType.\n */\nexport function stringToDType(dtype: string): DataType {\n  switch (dtype) {\n    case 'float32':\n      return 'float32';\n    default:\n      throw new ValueError(`Invalid dtype: ${dtype}`);\n  }\n}\n\n/**\n * Test the element-by-element equality of two Arrays of strings.\n * @param xs First array of strings.\n * @param ys Second array of strings.\n * @returns Wether the two arrays are all equal, element by element.\n */\nexport function stringsEqual(xs: string[], ys: string[]): boolean {\n  if (xs == null || ys == null) {\n    return xs === ys;\n  }\n  if (xs.length !== ys.length) {\n    return false;\n  }\n  for (let i = 0; i < xs.length; ++i) {\n    if (xs[i] !== ys[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Get the unique elements of an array.\n * @param xs Array.\n * @returns An Array consisting of the unique elements in `xs`.\n */\nexport function unique<T>(xs: T[]): T[] {\n  if (xs == null) {\n    return xs;\n  }\n  const out: T[] = [];\n  // TODO(cais): Maybe improve performance by sorting.\n  for (const x of xs) {\n    if (out.indexOf(x) === -1) {\n      out.push(x);\n    }\n  }\n  return out;\n}\n\n/**\n * Determine if an Object is empty (i.e., does not have own properties).\n * @param obj Object\n * @returns Whether the Object is empty.\n * @throws ValueError: If object is `null` or `undefined`.\n */\nexport function isObjectEmpty(obj: {}): boolean {\n  if (obj == null) {\n    throw new ValueError(`Invalid value in obj: ${JSON.stringify(obj)}`);\n  }\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Helper function used to build type union/enum run-time checkers.\n * @param values The list of allowed values.\n * @param label A string name for the type\n * @param value The value to test.\n * @throws ValueError: If the value is not in values nor `undefined`/`null`.\n */\nexport function checkStringTypeUnionValue(\n    values: string[], label: string, value: string): void {\n  if (value == null) {\n    return;\n  }\n  if (values.indexOf(value) < 0) {\n    throw new ValueError(`${value} is not a valid ${label}.  Valid values are ${\n        values} or null/undefined.`);\n  }\n}\n\n/**\n * Helper function for verifying the types of inputs.\n *\n * Ensures that the elements of `x` are all of type `expectedType`.\n * Also verifies that the length of `x` is within bounds.\n *\n * @param x Object to test.\n * @param expectedType The string expected type of all of the elements in the\n * Array.\n * @param minLength Return false if x.length is less than this.\n * @param maxLength Return false if x.length is greater than this.\n * @returns true if and only if `x` is an `Array<expectedType>` with\n * length >= `minLength` and <= `maxLength`.\n */\n// tslint:disable:no-any\nexport function checkArrayTypeAndLength(\n    x: any, expectedType: string, minLength = 0,\n    maxLength = Infinity): boolean {\n  assert(minLength >= 0);\n  assert(maxLength >= minLength);\n  return (\n      Array.isArray(x) && x.length >= minLength && x.length <= maxLength &&\n      x.every(e => typeof e === expectedType));\n}\n// tslint:enable:no-any\n\n/**\n * Assert that a value or an array of value are positive integer.\n *\n * @param value The value being asserted on. May be a single number or an array\n *   of numbers.\n * @param name Name of the value, used to make the error message.\n */\nexport function assertPositiveInteger(value: number|number[], name: string) {\n  if (Array.isArray(value)) {\n    util.assert(\n        value.length > 0, () => `${name} is unexpectedly an empty array.`);\n    value.forEach(\n        (v, i) => assertPositiveInteger(v, `element ${i + 1} of ${name}`));\n  } else {\n    util.assert(\n        Number.isInteger(value) && value > 0,\n        () => `Expected ${name} to be a positive integer, but got ` +\n            `${formatAsFriendlyString(value)}.`);\n  }\n}\n\n/**\n * Format a value into a display-friendly, human-readable fashion.\n *\n * - `null` is formatted as `'null'`\n * - Strings are formated with flanking pair of quotes.\n * - Arrays are formatted with flanking pair of square brackets.\n *\n * @param value The value to display.\n * @return Formatted string.\n */\n// tslint:disable-next-line:no-any\nexport function formatAsFriendlyString(value: any): string {\n  if (value === null) {\n    return 'null';\n  } else if (Array.isArray(value)) {\n    return '[' + value.map(v => formatAsFriendlyString(v)).join(',') + ']';\n  } else if (typeof value === 'string') {\n    return `\"${value}\"`;\n  } else {\n    return `${value}`;\n  }\n}\n\n/**\n * Returns a function `f2` (decorator) which wraps the original function\n * `f`. `f2` guarantees that `f` can be called at most once\n * every `waitMs` ms. If `f2` is called more often, it will return\n * the last returned result of `f`.\n *\n * @param f The original function `f` to wrap.\n * @param waitMs The time between two consecutive calls to `f` in ms.\n */\nexport function debounce<T>(\n    f: (...args: Array<{}>) => T, waitMs: number,\n    nowFunc?: Function): (...args: Array<{}>) => T {\n  let lastTime = nowFunc != null ? nowFunc() : util.now();\n  let lastResult: T;\n  const f2 = (...args: Array<{}>) => {\n    const now = nowFunc != null ? nowFunc() : util.now();\n    if (now - lastTime < waitMs) {\n      return lastResult;\n    }\n    lastTime = now;\n    lastResult = f(...args);\n    return lastResult;\n  };\n  return f2;\n}\n\n/**\n * Returns the fusable activation given a layers identifier.\n *\n * @param activationName The layers identifier string.\n * @return The name of the fusable activation.\n */\nexport function mapActivationToFusedKernel(activationName: string):\n    fused.Activation {\n  if (activationName === 'relu') {\n    return 'relu';\n  }\n  if (activationName === 'linear') {\n    return 'linear';\n  }\n  if (activationName === 'elu') {\n    return 'elu';\n  }\n  return null;\n}\n\ntype PossibleValues = Array<Array<boolean|string|number>>;\n\n/**\n * Returns the cartesian product of sets of values.\n * This works the same as itertools.product in Python.\n *\n * Example:\n *\n * filters = [128, 256, 512]\n * paddings = ['same', 'valid']\n *\n * product = [ [128, 'same'], [128, 'valid'], [256, 'same'], [256, 'valid'],\n * [512, 'same'], [512, 'valid']]\n *\n * @param arrayOfValues List/array of values.\n * @return The cartesian product.\n */\nexport function getCartesianProductOfValues(...arrayOfValues: PossibleValues):\n    PossibleValues {\n  assert(arrayOfValues.length > 0, 'arrayOfValues is empty');\n\n  for (const values of arrayOfValues) {\n    assert(Array.isArray(values), 'one of the values is not an array');\n    assert(values.length > 0, 'one of the values is empty');\n  }\n\n  return arrayOfValues.reduce((products, values) => {\n    if (products.length === 0) {\n      return values.map(value => [value]);\n    }\n\n    return values\n        .map(value => {\n          return products.map((prevValue) => [...prevValue, value]);\n        })\n        .reduce((flattenedProduct, unflattenedProduct) => {\n          return flattenedProduct.concat(unflattenedProduct);\n        }, []);\n  }, [] as PossibleValues);\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 448, "column": 0}, "map": {"version":3,"file":"math_utils.js","sourceRoot":"","sources":["file:///project/sandbox/user-workspace/node_modules/%40tensorflow/tfjs-layers/dist/utils/math_utils.js/__/__/__/__/__/__/tfjs-layers/src/utils/math_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Math utility functions.\n *\n * This file contains some frequently used math function that operates on\n * number[] or Float32Array and return a number. Many of these functions are\n * not-so-thick wrappers around TF.js Core functions. But they offer the\n * convenience of\n * 1) not having to convert the inputs into Tensors,\n * 2) not having to convert the returned Tensors to numbers.\n */\n\nimport {ValueError} from '../errors';\n\nexport type ArrayTypes = Uint8Array|Int32Array|Float32Array;\n\n/**\n * Determine if a number is an integer.\n */\nexport function isInteger(x: number): boolean {\n  return x === parseInt(x.toString(), 10);\n}\n\n/**\n * Calculate the product of an array of numbers.\n * @param array The array to calculate the product over.\n * @param begin Beginning index, inclusive.\n * @param end Ending index, exclusive.\n * @return The product.\n */\nexport function arrayProd(\n    array: number[]|ArrayTypes, begin?: number, end?: number): number {\n  if (begin == null) {\n    begin = 0;\n  }\n  if (end == null) {\n    end = array.length;\n  }\n\n  let prod = 1;\n  for (let i = begin; i < end; ++i) {\n    prod *= array[i];\n  }\n  return prod;\n}\n\n/**\n * Compute minimum value.\n * @param array\n * @return minimum value.\n */\nexport function min(array: number[]|Float32Array): number {\n  // same behavior as tf.min()\n  if (array.length === 0) {\n    return Number.NaN;\n  }\n  let min = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    if (value < min) {\n      min = value;\n    }\n  }\n  return min;\n}\n\n/**\n * Compute maximum value.\n * @param array\n * @return maximum value\n */\nexport function max(array: number[]|Float32Array): number {\n  // same behavior as tf.max()\n  if (array.length === 0) {\n    return Number.NaN;\n  }\n  let max = Number.NEGATIVE_INFINITY;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    if (value > max) {\n      max = value;\n    }\n  }\n  return max;\n}\n\n/**\n * Compute sum of array.\n * @param array\n * @return The sum.\n */\nexport function sum(array: number[]|Float32Array): number {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    sum += value;\n  }\n  return sum;\n}\n\n/**\n * Compute mean of array.\n * @param array\n * @return The mean.\n */\nexport function mean(array: number[]|Float32Array): number {\n  return sum(array) / array.length;\n}\n\n/**\n * Compute variance of array.\n * @param array\n * @return The variance.\n */\nexport function variance(array: number[]|Float32Array): number {\n  const meanValue = mean(array);\n  const demeaned = array.map((value: number) => value - meanValue);\n  let sumSquare = 0;\n  for (let i = 0; i < demeaned.length; i++) {\n    const value = demeaned[i];\n    sumSquare += value * value;\n  }\n  return sumSquare / array.length;\n}\n\n/**\n * Compute median of array.\n * @param array\n * @return The median value.\n */\nexport function median(array: number[]|Float32Array): number {\n  const arraySorted = array.slice().sort((a, b) => a - b);\n  const lowIdx = Math.floor((arraySorted.length - 1) / 2);\n  const highIdx = Math.ceil((arraySorted.length - 1) / 2);\n  if (lowIdx === highIdx) {\n    return arraySorted[lowIdx];\n  }\n  return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;\n}\n\n/**\n * Generate an array of integers in [begin, end).\n * @param begin Beginning integer, inclusive.\n * @param end Ending integer, exclusive.\n * @returns Range array.\n * @throws ValueError, iff `end` < `begin`.\n */\nexport function range(begin: number, end: number): number[] {\n  if (end < begin) {\n    throw new ValueError(`end (${end}) < begin (${begin}) is forbidden.`);\n  }\n  const out: number[] = [];\n  for (let i = begin; i < end; ++i) {\n    out.push(i);\n  }\n  return out;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 568, "column": 0}, "map": {"version":3,"file":"types_utils.js","sourceRoot":"","sources":["file:///project/sandbox/user-workspace/node_modules/%40tensorflow/tfjs-layers/dist/utils/types_utils.js/__/__/__/__/__/__/tfjs-layers/src/utils/types_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: utils/generic_utils.py */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\nimport {ValueError} from '../errors';\nimport {Shape} from '../keras_format/common';\n// tslint:enable\n\n/**\n * Determine whether the input is an Array of Shapes.\n */\nexport function isArrayOfShapes(x: Shape|Shape[]): boolean {\n  return Array.isArray(x) && Array.isArray(x[0]);\n}\n\n/**\n * Special case of normalizing shapes to lists.\n *\n * @param x A shape or list of shapes to normalize into a list of Shapes.\n * @return A list of Shapes.\n */\nexport function normalizeShapeList(x: Shape|Shape[]): Shape[] {\n  if (x.length === 0) {\n    return [];\n  }\n  if (!Array.isArray(x[0])) {\n    return [x] as Shape[];\n  }\n  return x as Shape[];\n}\n\n/**\n * Helper function to obtain exactly one Tensor.\n * @param xs: A single `tf.Tensor` or an `Array` of `tf.Tensor`s.\n * @return A single `tf.Tensor`. If `xs` is an `Array`, return the first one.\n * @throws ValueError: If `xs` is an `Array` and its length is not 1.\n */\nexport function getExactlyOneTensor(xs: Tensor|Tensor[]): Tensor {\n  let x: Tensor;\n  if (Array.isArray(xs)) {\n    if (xs.length !== 1) {\n      throw new ValueError(`Expected Tensor length to be 1; got ${xs.length}`);\n    }\n    x = xs[0];\n  } else {\n    x = xs;\n  }\n  return x;\n}\n\n/**\n * Helper function to obtain exactly on instance of Shape.\n *\n * @param shapes Input single `Shape` or Array of `Shape`s.\n * @returns If input is a single `Shape`, return it unchanged. If the input is\n *   an `Array` containing exactly one instance of `Shape`, return the instance.\n *   Otherwise, throw a `ValueError`.\n * @throws ValueError: If input is an `Array` of `Shape`s, and its length is not\n *   1.\n */\nexport function getExactlyOneShape(shapes: Shape|Shape[]): Shape {\n  if (Array.isArray(shapes) && Array.isArray(shapes[0])) {\n    if (shapes.length === 1) {\n      shapes = shapes as Shape[];\n      return shapes[0];\n    } else {\n      throw new ValueError(`Expected exactly 1 Shape; got ${shapes.length}`);\n    }\n  } else {\n    return shapes as Shape;\n  }\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;;;;;;AAKH,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;;AAO/B,SAAU,eAAe,CAAC,CAAgB;IAC9C,OAAO,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC;AAQK,SAAU,kBAAkB,CAAC,CAAgB;IACjD,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;QAClB,OAAO,EAAE,CAAC;KACX;IACD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;QACxB,OAAO;YAAC,CAAC;SAAY,CAAC;KACvB;IACD,OAAO,CAAY,CAAC;AACtB,CAAC;AAQK,SAAU,mBAAmB,CAAC,EAAmB;IACrD,IAAI,CAAS,CAAC;IACd,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;QACrB,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE;YACnB,MAAM,wKAAI,aAAU,CAAC,CAAA,oCAAA,EAAuC,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC;SAC1E;QACD,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;KACX,MAAM;QACL,CAAC,GAAG,EAAE,CAAC;KACR;IACD,OAAO,CAAC,CAAC;AACX,CAAC;AAYK,SAAU,kBAAkB,CAAC,MAAqB;IACtD,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;QACrD,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;YACvB,MAAM,GAAG,MAAiB,CAAC;YAC3B,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;SAClB,MAAM;YACL,MAAM,wKAAI,aAAU,CAAC,CAAA,8BAAA,EAAiC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;SACxE;KACF,MAAM;QACL,OAAO,MAAe,CAAC;KACxB;AACH,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 628, "column": 0}, "map": {"version":3,"file":"variable_utils.js","sourceRoot":"","sources":["file:///project/sandbox/user-workspace/node_modules/%40tensorflow/tfjs-layers/dist/utils/variable_utils.js/__/__/__/__/__/__/tfjs-layers/src/utils/variable_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {LayerVariable} from '../variables';\n\n/**\n * Count the elements in an Array of LayerVariables.\n *\n * @param weights: The LayerVariables of which the constituent numbers are to\n *   be counted.\n * @returns A count of the elements in all the LayerVariables\n */\nexport function countParamsInWeights(weights: LayerVariable[]): number {\n  let count = 0;\n  for (const weight of weights) {\n    if (weight.shape.length === 0) {\n      count += 1;\n    } else {\n      count += weight.shape.reduce((a, b) => a * b);\n    }\n  }\n  return count;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;GAQG,CAIH;;;;;;GAMG;;;AACG,SAAU,oBAAoB,CAAC,OAAwB;IAC3D,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,KAAK,MAAM,MAAM,IAAI,OAAO,CAAE;QAC5B,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YAC7B,KAAK,IAAI,CAAC,CAAC;SACZ,MAAM;YACL,KAAK,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAG,CAAD,AAAE,GAAG,CAAC,CAAC,CAAC;SAC/C;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 662, "column": 0}, "map": {"version":3,"file":"layer_utils.js","sourceRoot":"","sources":["file:///project/sandbox/user-workspace/node_modules/%40tensorflow/tfjs-layers/dist/utils/layer_utils.js/__/__/__/__/__/__/tfjs-layers/src/utils/layer_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {Container} from '../engine/container';\nimport {Layer, Node} from '../engine/topology';\nimport {countParamsInWeights} from './variable_utils';\n\n/**\n * Print the summary of a LayersModel object.\n *\n * @param model tf.LayersModel instance.\n * @param lineLength Total length of printed lines. Set this to adapt to the\n *   display to different terminal or console sizes.\n * @param positions Relative or absolute positions of log elements in each\n *   line. Each number corresponds to right-most (i.e., ending) position of a\n *   column.\n *   If not provided, defaults to `[0.45, 0.85, 1]` for sequential-like\n *   models and `[0.33, 0.55, 0.67, 1]` for non-sequential like models.\n * @param printFn Print function to use.\n *   It will be called on each line of the summary. You can provide a custom\n *   function in order to capture the string summary. Defaults to `console.log`.\n */\nexport function printSummary(\n    model: Container, lineLength?: number, positions?: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void =\n        console.log): void {\n  const sequentialLike = isModelSequentialLike(model);\n\n  // Header names for different log elements.\n  const toDisplay: string[] = ['Layer (type)', 'Input Shape', 'Output shape', 'Param #'];\n  if (sequentialLike) {\n    lineLength = lineLength || 90;\n    positions = positions || [0.32, 0.61, 0.89, 1];\n  } else {\n    lineLength = lineLength || 115;\n    positions = positions || [0.24, 0.48, 0.70, 0.80, 1];\n    // Header names for different log elements.\n  }\n\n  if (positions[positions.length - 1] <= 1) {\n    // `positions` is relative. Convert it to absolute positioning.\n    positions = positions.map(p => Math.floor(lineLength * p));\n  }\n\n  let relevantNodes: Node[];\n  if (!sequentialLike) {\n    toDisplay.push('Receives inputs');\n    relevantNodes = [];\n    for (const depth in model.nodesByDepth) {\n      relevantNodes.push(...model.nodesByDepth[depth]);\n    }\n  }\n\n  printFn('_'.repeat(lineLength));\n  printRow(toDisplay, positions, printFn);\n  printFn('='.repeat(lineLength));\n\n  const layers = model.layers;\n  for (let i = 0; i < layers.length; ++i) {\n    if (sequentialLike) {\n      printLayerSummary(layers[i], positions, printFn);\n    } else {\n      printLayerSummaryWithConnections(\n          layers[i], positions, relevantNodes, printFn);\n    }\n    printFn((i === layers.length - 1 ? '=' : '_').repeat(lineLength));\n  }\n\n  // tslint:disable-next-line:no-any\n  (model as any).checkTrainableWeightsConsistency();\n\n  const trainableCount = countTrainableParams(model);\n  const nonTrainableCount = countParamsInWeights(model.nonTrainableWeights);\n\n  printFn(`Total params: ${trainableCount + nonTrainableCount}`);\n  printFn(`Trainable params: ${trainableCount}`);\n  printFn(`Non-trainable params: ${nonTrainableCount}`);\n  printFn('_'.repeat(lineLength));\n}\n\nfunction countTrainableParams(model: Container): number {\n  let trainableCount: number;\n  // tslint:disable:no-any\n  if ((model as any).collectedTrainableWeights != null) {\n    trainableCount =\n        countParamsInWeights((model as any).collectedTrainableWeights);\n  } else {\n    trainableCount = countParamsInWeights(model.trainableWeights);\n  }\n  // tslint:enable:no-any\n  return trainableCount;\n}\n\nfunction isModelSequentialLike(model: Container): boolean {\n  let sequentialLike = true;\n  const nodesByDepth: Node[][] = [];\n  const nodes: Node[] = [];\n  for (const depth in model.nodesByDepth) {\n    nodesByDepth.push(model.nodesByDepth[depth]);\n  }\n  for (const depthNodes of nodesByDepth) {\n    if (depthNodes.length > 1 ||\n        depthNodes.length === 1 && depthNodes[0].inboundLayers.length > 1) {\n      sequentialLike = false;\n      break;\n    }\n    nodes.push(...depthNodes);\n  }\n  if (sequentialLike) {\n    // Search for shared layers.\n    for (const layer of model.layers) {\n      let flag = false;\n      for (const node of layer.inboundNodes) {\n        if (nodes.indexOf(node) !== -1) {\n          if (flag) {\n            sequentialLike = false;\n            break;\n          } else {\n            flag = true;\n          }\n        }\n      }\n      if (!sequentialLike) {\n        break;\n      }\n    }\n  }\n  return sequentialLike;\n}\n\nfunction printRow(\n    fields: string[], positions: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void = console.log) {\n  let line = '';\n  for (let i = 0; i < fields.length; ++i) {\n    if (i > 0) {\n      line = line.slice(0, line.length - 1) + ' ';\n    }\n    line += fields[i];\n    line = line.slice(0, positions[i]);\n    line += ' '.repeat(positions[i] - line.length);\n  }\n  printFn(line);\n}\n\n/**\n * Prints a summary for a single Layer, without connectivity information.\n *\n * @param layer: Layer instance to print.\n */\nfunction printLayerSummary(\n    layer: Layer, positions: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void) {\n  let outputShape: string;\n  let inputShape: string;\n\n  try {\n    inputShape = (layer.inboundNodes.map(\n      x => JSON.stringify(x.inputShapes)\n    )).join(',');\n  } catch (err) {\n    inputShape = 'multiple';\n  }\n\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = 'multiple';\n  }\n\n  const name = layer.name;\n  const className = layer.getClassName();\n  const fields: string[] =\n      [`${name} (${className})`, inputShape,\n      outputShape, layer.countParams().toString()];\n  printRow(fields, positions, printFn);\n}\n\n/**\n * Prints a summary for a single Layer, with connectivity information.\n */\nfunction printLayerSummaryWithConnections(\n    layer: Layer, positions: number[], relevantNodes: Node[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void) {\n  let outputShape: string;\n  let inputShape: string;\n\n  try {\n    inputShape = (layer.inboundNodes.map(\n      x => JSON.stringify(x.inputShapes)\n    )).join(',');\n  } catch (err) {\n    inputShape = 'multiple';\n  }\n\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = 'multiple';\n  }\n\n  const connections: string[] = [];\n  for (const node of layer.inboundNodes) {\n    if (relevantNodes != null && relevantNodes.length > 0 &&\n        relevantNodes.indexOf(node) === -1) {\n      continue;\n    }\n    for (let i = 0; i < node.inboundLayers.length; ++i) {\n      const inboundLayer = node.inboundLayers[i].name;\n      const inboundLayerIndex = node.nodeIndices[i];\n      const inboundTensorIndex = node.tensorIndices[i];\n      connections.push(\n          `${inboundLayer}[${inboundLayerIndex}][${inboundTensorIndex}]`);\n    }\n  }\n  const name = layer.name;\n  const className = layer.getClassName();\n  const firstConnection = connections.length === 0 ? '' : connections[0];\n  const fields: string[] = [\n    `${name} (${className})`, inputShape,\n    outputShape, layer.countParams().toString(),\n    firstConnection\n  ];\n\n  printRow(fields, positions, printFn);\n  for (let i = 1; i < connections.length; ++i) {\n    printRow(['', '', '', '', connections[i]], positions, printFn);\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 879, "column": 0}, "map": {"version":3,"file":"serialization_utils.js","sourceRoot":"","sources":["file:///project/sandbox/user-workspace/node_modules/%40tensorflow/tfjs-layers/dist/utils/serialization_utils.js/__/__/__/__/__/__/tfjs-layers/src/utils/serialization_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n// Porting note: This file doesn't exist in PyKeras.\n// Its purpose here is to centralize the boundary layer between\n// tfjs-layers's internal Config TS-Centric format and PyKeras's\n// serialized Python Config format.\n\nimport {serialization} from '@tensorflow/tfjs-core';\n\nimport {PyJsonValue} from '../keras_format/types';\nimport * as generic_utils from '../utils/generic_utils';\n// tslint:enable\n\n/**\n * Test whether a value in an array is the name of a LayersModel or Layer.\n * @param key The key name that the value is found under. Note that the key\n *   may not be at the level immediately above the value, if the value is in a\n *   nested array.\n * @param index Index of the value in the Array that it is found in.\n * @param value The value object.\n * @returns A boolean indicating whether value is a name.\n */\nfunction isArrayItemInputOrOutputName<T>(\n    key: string, index: number, value: T): boolean {\n  return (key === 'inboundNodes' || key === 'outputLayers' ||\n          key === 'inputLayers') &&\n      index === 0 && typeof value === 'string';\n}\n\n/**\n * Convert a Pythonic config object to TypeScript config object.\n * @param pythonicConfig The config object to convert.\n * @param key Optional key name of the object being converted.\n * @returns Result of the conversion.\n */\nexport function convertPythonicToTs(\n    pythonicConfig: PyJsonValue, key?: string): serialization.ConfigDictValue {\n  if (pythonicConfig === null) {\n    return null;\n  } else if (typeof pythonicConfig === 'string') {\n    return generic_utils.toCamelCase(pythonicConfig);\n  } else if (\n      (typeof pythonicConfig === 'number') ||\n      (typeof pythonicConfig === 'boolean')) {\n    return pythonicConfig;\n  } else if (pythonicConfig instanceof Array) {\n    const tsArray = [];\n    const arrayLength = pythonicConfig.length;\n    for (let i = 0; i < arrayLength; ++i) {\n      const item = pythonicConfig[i];\n      if (isArrayItemInputOrOutputName(key, i, item)) {\n        tsArray.push(item);\n      } else {\n        tsArray.push(convertPythonicToTs(item, key));\n      }\n    }\n    return tsArray;\n  } else {\n    const tsDict: serialization.ConfigDict = {};\n    for (const pythonicKey of Object.keys(pythonicConfig)) {\n      const pythonicValue = pythonicConfig[pythonicKey];\n      if (pythonicKey === 'name' && typeof pythonicValue === 'string') {\n        // Special case the 'name' key with a string value. Name values, such as\n        // the names of LayersModel and Layer instances, should not undergo the\n        // camel-case conversion.\n        tsDict[pythonicKey] = pythonicValue;\n      } else {\n        const tsKey = generic_utils.toCamelCase(pythonicKey);\n        tsDict[tsKey] = convertPythonicToTs(pythonicValue, tsKey);\n      }\n    }\n    return tsDict;\n  }\n}\n\n/**\n * Convert a TypeScript config object to Python config object.\n * @param tsConfig The config object to convert.\n * @param key Optional key name of the object being converted.\n * @returns Result of the conversion.\n */\nexport function convertTsToPythonic(\n    tsConfig: serialization.ConfigDictValue, key?: string): PyJsonValue {\n  if (tsConfig === null || tsConfig === undefined) {\n    return null;\n  } else if (typeof tsConfig === 'string') {\n    return generic_utils.toSnakeCase(tsConfig);\n  } else if (\n      (typeof tsConfig === 'number') || (typeof tsConfig === 'boolean')) {\n    return tsConfig;\n  } else if (tsConfig instanceof Array) {\n    const pyArray = [];\n    const arrayLength = tsConfig.length;\n    for (let i = 0; i < arrayLength; ++i) {\n      const item = tsConfig[i];\n      if (isArrayItemInputOrOutputName(key, i, item)) {\n        pyArray.push(item);\n      } else {\n        pyArray.push(convertTsToPythonic(item, key));\n      }\n    }\n    return pyArray;\n  } else {\n    const pyDict: serialization.ConfigDict = {};\n    for (const tsKey of Object.keys(tsConfig)) {\n      const tsValue = tsConfig[tsKey];\n      const pyKey = generic_utils.toSnakeCase(tsKey);\n      if ((tsKey === 'name' || tsKey === 'className') &&\n          typeof tsValue === 'string') {\n        // Special case the 'name' key with a string value. Name values, such as\n        // the names of LayersModel and Layer instances, should not undergo the\n        // snake-case conversion.\n        pyDict[pyKey] = tsValue;\n      } else {\n        pyDict[pyKey] = convertTsToPythonic(tsValue, tsKey);\n      }\n    }\n    return pyDict;\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 983, "column": 0}, "map": {"version":3,"file":"conv_utils.js","sourceRoot":"","sources":["file:///project/sandbox/user-workspace/node_modules/%40tensorflow/tfjs-layers/dist/utils/conv_utils.js/__/__/__/__/__/__/tfjs-layers/src/utils/conv_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {ValueError} from '../errors';\nimport {PaddingMode} from '../keras_format/common';\n\nimport {pyListRepeat} from './generic_utils';\nimport {isInteger, max} from './math_utils';\n\n/**\n * Transforms a single number of array of numbers into an array of numbers.\n * @param value\n * @param n: The size of the tuple to be returned.\n * @param name: Name of the parameter, used for generating error messages.\n * @returns An array of numbers.\n */\nexport function normalizeArray(\n    value: number|number[], n: number, name: string): number[] {\n  if (typeof value === 'number') {\n    return pyListRepeat(value, n);\n  } else {\n    if (value.length !== n) {\n      throw new ValueError(\n          `The ${name} argument must be an integer or tuple of ${n} integers.` +\n          ` Received: ${value.length} elements.`);\n    }\n    for (let i = 0; i < n; ++i) {\n      const singleValue = value[i];\n      if (!isInteger(singleValue)) {\n        throw new ValueError(\n            `The ${name} argument must be an integer or tuple of ${n}` +\n            ` integers. Received: ${JSON.stringify(value)} including a` +\n            ` non-integer number ${singleValue}`);\n      }\n    }\n    return value;\n  }\n}\n\n/**\n * Determines output length of a convolution given input length.\n * @param inputLength\n * @param filterSize\n * @param padding\n * @param stride\n * @param dilation: dilation rate.\n */\nexport function convOutputLength(\n    inputLength: number, filterSize: number, padding: PaddingMode,\n    stride: number, dilation = 1): number {\n  if (inputLength == null) {\n    return inputLength;\n  }\n  const dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);\n  let outputLength: number;\n  if (padding === 'same') {\n    outputLength = inputLength;\n  } else {  // VALID\n    outputLength = inputLength - dilatedFilterSize + 1;\n  }\n  return Math.floor((outputLength + stride - 1) / stride);\n}\n\nexport function deconvLength(\n    dimSize: number, strideSize: number, kernelSize: number,\n    padding: PaddingMode): number {\n  if (dimSize == null) {\n    return null;\n  }\n\n  if (padding === 'valid') {\n    dimSize = dimSize * strideSize + max([kernelSize - strideSize, 0]);\n  } else if (padding === 'same') {\n    dimSize = dimSize * strideSize;\n  } else {\n    throw new ValueError(`Unsupport padding mode: ${padding}.`);\n  }\n  return dimSize;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;;;;;AAEH,OAAO,EAAC,UAAU,EAAC,MAAM,WAAW,CAAC;AAGrC,OAAO,EAAC,YAAY,EAAC,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAC,SAAS,EAAE,GAAG,EAAC,MAAM,cAAc,CAAC;;;;AAStC,SAAU,cAAc,CAC1B,KAAsB,EAAE,CAAS,EAAE,IAAY;IACjD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,8LAAO,gBAAA,AAAY,EAAC,KAAK,EAAE,CAAC,CAAC,CAAC;KAC/B,MAAM;QACL,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,MAAM,wKAAI,aAAU,CAChB,CAAA,IAAA,EAAO,IAAI,CAAA,yCAAA,EAA4C,CAAC,CAAA,UAAA,CAAY,GACpE,CAAA,WAAA,EAAc,KAAK,CAAC,MAAM,CAAA,UAAA,CAAY,CAAC,CAAC;SAC7C;QACD,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAE;YAC1B,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,sLAAC,YAAA,AAAS,EAAC,WAAW,CAAC,EAAE;gBAC3B,MAAM,wKAAI,aAAU,CAChB,CAAA,IAAA,EAAO,IAAI,CAAA,yCAAA,EAA4C,CAAC,EAAE,GAC1D,CAAA,qBAAA,EAAwB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA,YAAA,CAAc,GAC3D,CAAA,oBAAA,EAAuB,WAAW,EAAE,CAAC,CAAC;aAC3C;SACF;QACD,OAAO,KAAK,CAAC;KACd;AACH,CAAC;AAUK,SAAU,gBAAgB,CAC5B,WAAmB,EAAE,UAAkB,EAAE,OAAoB,EAC7D,MAAc,EAAE,QAAQ,GAAG,CAAC;IAC9B,IAAI,WAAW,IAAI,IAAI,EAAE;QACvB,OAAO,WAAW,CAAC;KACpB;IACD,MAAM,iBAAiB,GAAG,UAAU,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;IACzE,IAAI,YAAoB,CAAC;IACzB,IAAI,OAAO,KAAK,MAAM,EAAE;QACtB,YAAY,GAAG,WAAW,CAAC;KAC5B,MAAM,EAAG,QAAQ;QAChB,YAAY,GAAG,WAAW,GAAG,iBAAiB,GAAG,CAAC,CAAC;KACpD;IACD,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,YAAY,GAAG,MAAM,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;AAC1D,CAAC;AAEK,SAAU,YAAY,CACxB,OAAe,EAAE,UAAkB,EAAE,UAAkB,EACvD,OAAoB;IACtB,IAAI,OAAO,IAAI,IAAI,EAAE;QACnB,OAAO,IAAI,CAAC;KACb;IAED,IAAI,OAAO,KAAK,OAAO,EAAE;QACvB,OAAO,GAAG,OAAO,GAAG,UAAU,wLAAG,MAAA,AAAG,EAAC;YAAC,UAAU,GAAG,UAAU;YAAE,CAAC;SAAC,CAAC,CAAC;KACpE,MAAM,IAAI,OAAO,KAAK,MAAM,EAAE;QAC7B,OAAO,GAAG,OAAO,GAAG,UAAU,CAAC;KAChC,MAAM;QACL,MAAM,wKAAI,aAAU,CAAC,CAAA,wBAAA,EAA2B,OAAO,CAAA,CAAA,CAAG,CAAC,CAAC;KAC7D;IACD,OAAO,OAAO,CAAC;AACjB,CAAC","ignoreList":[0],"debugId":null}}]
}